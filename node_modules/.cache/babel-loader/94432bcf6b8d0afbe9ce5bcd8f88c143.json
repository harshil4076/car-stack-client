{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\umipa\\\\Desktop\\\\carstack-client\\\\src\\\\Components\\\\TextInput\\\\textInput.js\";\nimport React, { useState, useEffect } from \"react\"; //material ui components\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nconst useStyles = makeStyles(theme => ({\n  textBox: {\n    minWidth: 200\n  }\n}));\n\nconst TextInput = props => {\n  const {\n    labelText,\n    getTextValue,\n    isFullWidth,\n    isDescription,\n    item\n  } = props;\n  const classes = useStyles(props); //setting the state of the user input\n\n  const [textValue, setTextValue] = useState({\n    value: item ? item : \"\"\n  }); //only to be called when there is a change in state\n\n  useEffect(() => {\n    getTextValue(textValue.value);\n  }, [getTextValue, textValue.value]); //handle the user input\n\n  const handleChange = e => {\n    setTextValue({\n      value: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: isDescription ? true : false,\n    multiline: isDescription ? true : false,\n    rows: isDescription ? \"4\" : \"0\",\n    onChange: handleChange,\n    label: labelText ? labelText : \"Enter Label\",\n    variant: isDescription ? \"outlined\" : \"standard\",\n    className: classes.textBox,\n    value: textValue.value,\n    isFullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default TextInput;\nTextInput.propTypes = {\n  labelText: PropTypes.string,\n  getTextValue: PropTypes.func,\n  isFullWidth: PropTypes.bool,\n  isDescription: PropTypes.bool,\n  item: PropTypes.string\n};","map":{"version":3,"sources":["C:/Users/umipa/Desktop/carstack-client/src/Components/TextInput/textInput.js"],"names":["React","useState","useEffect","TextField","makeStyles","PropTypes","useStyles","theme","textBox","minWidth","TextInput","props","labelText","getTextValue","isFullWidth","isDescription","item","classes","textValue","setTextValue","value","handleChange","e","target","propTypes","string","func","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH;AAD4B,CAAL,CAAN,CAA5B;;AAKA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,WAA3B;AAAwCC,IAAAA,aAAxC;AAAuDC,IAAAA;AAAvD,MAAgEL,KAAtE;AACA,QAAMM,OAAO,GAAGX,SAAS,CAACK,KAAD,CAAzB,CAFyB,CAGzB;;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC;AACzCmB,IAAAA,KAAK,EAAEJ,IAAI,GAAGA,IAAH,GAAU;AADoB,GAAD,CAA1C,CAJyB,CAQzB;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACK,SAAS,CAACE,KAAX,CAAZ;AACD,GAFQ,EAEN,CAACP,YAAD,EAAeK,SAAS,CAACE,KAAzB,CAFM,CAAT,CATyB,CAazB;;AACA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBH,IAAAA,YAAY,CAAC;AACXC,MAAAA,KAAK,EAAEE,CAAC,CAACC,MAAF,CAASH;AADL,KAAD,CAAZ;AAGD,GAJD;;AAKA,sBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEL,aAAa,GAAG,IAAH,GAAU,KADpC;AAEE,IAAA,SAAS,EAAEA,aAAa,GAAG,IAAH,GAAU,KAFpC;AAGE,IAAA,IAAI,EAAEA,aAAa,GAAG,GAAH,GAAS,GAH9B;AAIE,IAAA,QAAQ,EAAEM,YAJZ;AAKE,IAAA,KAAK,EAAET,SAAS,GAAGA,SAAH,GAAe,aALjC;AAME,IAAA,OAAO,EAAEG,aAAa,GAAG,UAAH,GAAgB,UANxC;AAOE,IAAA,SAAS,EAAEE,OAAO,CAACT,OAPrB;AAQE,IAAA,KAAK,EAAEU,SAAS,CAACE,KARnB;AASE,IAAA,WAAW,MATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAaD,CAhCD;;AAkCA,eAAeV,SAAf;AAEAA,SAAS,CAACc,SAAV,GAAsB;AACpBZ,EAAAA,SAAS,EAAEP,SAAS,CAACoB,MADD;AAEpBZ,EAAAA,YAAY,EAAER,SAAS,CAACqB,IAFJ;AAGpBZ,EAAAA,WAAW,EAAET,SAAS,CAACsB,IAHH;AAIpBZ,EAAAA,aAAa,EAAEV,SAAS,CAACsB,IAJL;AAKpBX,EAAAA,IAAI,EAAEX,SAAS,CAACoB;AALI,CAAtB","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n//material ui components\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  textBox: {\r\n    minWidth: 200\r\n  }\r\n}));\r\nconst TextInput = props => {\r\n  const { labelText, getTextValue, isFullWidth, isDescription, item } = props;\r\n  const classes = useStyles(props);\r\n  //setting the state of the user input\r\n  const [textValue, setTextValue] = useState({\r\n    value: item ? item : \"\"\r\n  });\r\n\r\n  //only to be called when there is a change in state\r\n  useEffect(() => {\r\n    getTextValue(textValue.value);\r\n  }, [getTextValue, textValue.value]);\r\n\r\n  //handle the user input\r\n  const handleChange = e => {\r\n    setTextValue({\r\n      value: e.target.value\r\n    });\r\n  };\r\n  return (\r\n    <TextField\r\n      fullWidth={isDescription ? true : false}\r\n      multiline={isDescription ? true : false}\r\n      rows={isDescription ? \"4\" : \"0\"}\r\n      onChange={handleChange}\r\n      label={labelText ? labelText : \"Enter Label\"}\r\n      variant={isDescription ? \"outlined\" : \"standard\"}\r\n      className={classes.textBox}\r\n      value={textValue.value}\r\n      isFullWidth\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n\r\nTextInput.propTypes = {\r\n  labelText: PropTypes.string,\r\n  getTextValue: PropTypes.func,\r\n  isFullWidth: PropTypes.bool,\r\n  isDescription: PropTypes.bool,\r\n  item: PropTypes.string\r\n};\r\n"]},"metadata":{},"sourceType":"module"}